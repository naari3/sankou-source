(self.webpackChunkecsy_typescript_boilerplate=self.webpackChunkecsy_typescript_boilerplate||[]).push([[143],{324:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";var _utils_js__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(458),_Utils_js__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(598);function hookConsoleAndErrors(e){["error","warning","log"].forEach((t=>{if("function"==typeof console[t]){var n=console[t].bind(console);console[t]=(...s)=>(e.send({method:"console",type:t,args:JSON.stringify(s)}),n.apply(null,s))}})),window.addEventListener("error",(t=>{e.send({method:"error",error:JSON.stringify({message:t.error.message,stack:t.error.stack})})}))}function includeRemoteIdHTML(e){let t=document.createElement("div");return t.style.cssText="\n    align-items: center;\n    background-color: #333;\n    color: #aaa;\n    display:flex;\n    font-family: Arial;\n    font-size: 1.1em;\n    height: 40px;\n    justify-content: center;\n    left: 0;\n    opacity: 0.9;\n    position: absolute;\n    right: 0;\n    text-align: center;\n    top: 0;\n  ",t.innerHTML=`Open ECSY devtools to connect to this page using the code:&nbsp;<b style="color: #fff">${e}</b>&nbsp;<button onClick="generateNewCode()">Generate new code</button>`,document.body.appendChild(t),t}function enableRemoteDevtools(remoteId){if(!_Utils_js__WEBPACK_IMPORTED_MODULE_0__.Ym)return void console.warn("Remote devtools not available outside the browser");window.generateNewCode=()=>{window.localStorage.clear(),remoteId=(0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.O)(6),window.localStorage.setItem("ecsyRemoteId",remoteId),window.location.reload(!1)},remoteId=remoteId||window.localStorage.getItem("ecsyRemoteId"),remoteId||(remoteId=(0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.O)(6),window.localStorage.setItem("ecsyRemoteId",remoteId));let infoDiv=includeRemoteIdHTML(remoteId);window.__ECSY_REMOTE_DEVTOOLS_INJECTED=!0,window.__ECSY_REMOTE_DEVTOOLS={};let Version="",worldsBeforeLoading=[],onWorldCreated=e=>{var t=e.detail.world;Version=e.detail.version,worldsBeforeLoading.push(t)};window.addEventListener("ecsy-world-created",onWorldCreated);let onLoaded=()=>{var peer=new Peer(remoteId,{host:"peerjs.ecsy.io",secure:!0,port:443,config:{iceServers:[{url:"stun:stun.l.google.com:19302"},{url:"stun:stun1.l.google.com:19302"},{url:"stun:stun2.l.google.com:19302"},{url:"stun:stun3.l.google.com:19302"},{url:"stun:stun4.l.google.com:19302"}]},debug:3});peer.on("open",(()=>{peer.on("connection",(connection=>{window.__ECSY_REMOTE_DEVTOOLS.connection=connection,connection.on("open",(function(){infoDiv.innerHTML="Connected",connection.on("data",(function(data){if("init"===data.type){var script=document.createElement("script");script.setAttribute("type","text/javascript"),script.onload=()=>{script.parentNode.removeChild(script),window.removeEventListener("ecsy-world-created",onWorldCreated),worldsBeforeLoading.forEach((e=>{var t=new CustomEvent("ecsy-world-created",{detail:{world:e,version:Version}});window.dispatchEvent(t)}))},script.innerHTML=data.script,(document.head||document.documentElement).appendChild(script),script.onload(),hookConsoleAndErrors(connection)}else if("executeScript"===data.type){let value=eval(data.script);data.returnEval&&connection.send({method:"evalReturn",value})}}))}))}))}))};(0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.L)("https://cdn.jsdelivr.net/npm/peerjs@0.3.20/dist/peer.min.js",onLoaded)}if(_Utils_js__WEBPACK_IMPORTED_MODULE_0__.Ym){const e=new URLSearchParams(window.location.search);e.has("enable-remote-devtools")&&enableRemoteDevtools()}},458:(e,t,n)=>{"use strict";function s(e){for(var t="",n="ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789",s=n.length,o=0;o<e;o++)t+=n.charAt(Math.floor(Math.random()*s));return t}function o(e,t){var n=document.createElement("script");n.src=e,n.onload=t,(document.head||document.documentElement).appendChild(n)}n.d(t,{O:()=>s,L:()=>o})},598:(e,t,n)=>{"use strict";function s(e){for(var t=[],n=0;n<e.length;n++){var s=e[n];if(!r(s))throw new Error("Tried to create a query with an unregistered component");if("object"==typeof s){var o="not"===s.operator?"!":s.operator;t.push(o+s.Component._typeId)}else t.push(s._typeId)}return t.sort().join("-")}n.d(t,{EG:()=>s,Ym:()=>o,zO:()=>i,fh:()=>r});const o="undefined"!=typeof window,i=o&&void 0!==window.performance?performance.now.bind(performance):Date.now.bind(Date);function r(e){return"object"==typeof e&&void 0!==e.Component._typeId||e.isComponent&&void 0!==e._typeId}},869:(e,t,n)=>{"use strict";var s=n(598);class o{constructor(e){this._systems=[],this._executeSystems=[],this.world=e,this.lastExecutedSystem=null}registerSystem(e,t){if(!e.isSystem)throw new Error(`System '${e.name}' does not extend 'System' class`);if(void 0!==this.getSystem(e))return console.warn(`System '${e.getName()}' already registered.`),this;var n=new e(this.world,t);return n.init&&n.init(t),n.order=this._systems.length,this._systems.push(n),n.execute&&(this._executeSystems.push(n),this.sortSystems()),this}unregisterSystem(e){let t=this.getSystem(e);return void 0===t?(console.warn(`Can unregister system '${e.getName()}'. It doesn't exist.`),this):(this._systems.splice(this._systems.indexOf(t),1),t.execute&&this._executeSystems.splice(this._executeSystems.indexOf(t),1),this)}sortSystems(){this._executeSystems.sort(((e,t)=>e.priority-t.priority||e.order-t.order))}getSystem(e){return this._systems.find((t=>t instanceof e))}getSystems(){return this._systems}removeSystem(e){var t=this._systems.indexOf(e);~t&&this._systems.splice(t,1)}executeSystem(e,t,n){if(e.initialized&&e.canExecute()){let o=(0,s.zO)();e.execute(t,n),e.executeTime=(0,s.zO)()-o,this.lastExecutedSystem=e,e.clearEvents()}}stop(){this._executeSystems.forEach((e=>e.stop()))}execute(e,t,n){this._executeSystems.forEach((s=>(n||s.enabled)&&this.executeSystem(s,e,t)))}stats(){for(var e={numSystems:this._systems.length,systems:{}},t=0;t<this._systems.length;t++){var n=this._systems[t],s=e.systems[n.getName()]={queries:{},executeTime:n.executeTime};for(var o in n.ctx)s.queries[o]=n.ctx[o].stats()}return e}}class i{constructor(e,t){this.freeList=[],this.count=0,this.T=e,this.isObjectPool=!0,void 0!==t&&this.expand(t)}acquire(){return this.freeList.length<=0&&this.expand(Math.round(.2*this.count)+1),this.freeList.pop()}release(e){e.reset(),this.freeList.push(e)}expand(e){for(var t=0;t<e;t++){var n=new this.T;n._pool=this,this.freeList.push(n)}this.count+=e}totalSize(){return this.count}totalFree(){return this.freeList.length}totalUsed(){return this.count-this.freeList.length}}class r{constructor(){this._listeners={},this.stats={fired:0,handled:0}}addEventListener(e,t){let n=this._listeners;void 0===n[e]&&(n[e]=[]),-1===n[e].indexOf(t)&&n[e].push(t)}hasEventListener(e,t){return void 0!==this._listeners[e]&&-1!==this._listeners[e].indexOf(t)}removeEventListener(e,t){var n=this._listeners[e];if(void 0!==n){var s=n.indexOf(t);-1!==s&&n.splice(s,1)}}dispatchEvent(e,t,n){this.stats.fired++;var s=this._listeners[e];if(void 0!==s)for(var o=s.slice(0),i=0;i<o.length;i++)o[i].call(this,t,n)}resetCounters(){this.stats.fired=this.stats.handled=0}}class a{constructor(e,t){if(this.Components=[],this.NotComponents=[],e.forEach((e=>{"object"==typeof e?this.NotComponents.push(e.Component):this.Components.push(e)})),0===this.Components.length)throw new Error("Can't create a query without components");this.entities=[],this.eventDispatcher=new r,this.reactive=!1,this.key=(0,s.EG)(e);for(var n=0;n<t._entities.length;n++){var o=t._entities[n];this.match(o)&&(o.queries.push(this),this.entities.push(o))}}addEntity(e){e.queries.push(this),this.entities.push(e),this.eventDispatcher.dispatchEvent(a.prototype.ENTITY_ADDED,e)}removeEntity(e){let t=this.entities.indexOf(e);~t&&(this.entities.splice(t,1),t=e.queries.indexOf(this),e.queries.splice(t,1),this.eventDispatcher.dispatchEvent(a.prototype.ENTITY_REMOVED,e))}match(e){return e.hasAllComponents(this.Components)&&!e.hasAnyComponents(this.NotComponents)}toJSON(){return{key:this.key,reactive:this.reactive,components:{included:this.Components.map((e=>e.name)),not:this.NotComponents.map((e=>e.name))},numEntities:this.entities.length}}stats(){return{numComponents:this.Components.length,numEntities:this.entities.length}}}a.prototype.ENTITY_ADDED="Query#ENTITY_ADDED",a.prototype.ENTITY_REMOVED="Query#ENTITY_REMOVED",a.prototype.COMPONENT_CHANGED="Query#COMPONENT_CHANGED";class h{constructor(e){this._world=e,this._queries={}}onEntityRemoved(e){for(var t in this._queries){var n=this._queries[t];-1!==e.queries.indexOf(n)&&n.removeEntity(e)}}onEntityComponentAdded(e,t){for(var n in this._queries){var s=this._queries[n];~s.NotComponents.indexOf(t)&&~s.entities.indexOf(e)?s.removeEntity(e):~s.Components.indexOf(t)&&s.match(e)&&!~s.entities.indexOf(e)&&s.addEntity(e)}}onEntityComponentRemoved(e,t){for(var n in this._queries){var s=this._queries[n];~s.NotComponents.indexOf(t)&&!~s.entities.indexOf(e)&&s.match(e)?s.addEntity(e):~s.Components.indexOf(t)&&~s.entities.indexOf(e)&&!s.match(e)&&s.removeEntity(e)}}getQuery(e){var t=(0,s.EG)(e),n=this._queries[t];return n||(this._queries[t]=n=new a(e,this._world)),n}stats(){var e={};for(var t in this._queries)e[t]=this._queries[t].stats();return e}}class m{constructor(e){if(!1!==e){const t=this.constructor.schema;for(const n in t)if(e&&e.hasOwnProperty(n))this[n]=e[n];else{const e=t[n];if(e.hasOwnProperty("default"))this[n]=e.type.clone(e.default);else{const t=e.type;this[n]=t.clone(t.default)}}}this._pool=null}copy(e){const t=this.constructor.schema;for(const n in t){const s=t[n];e.hasOwnProperty(n)&&(this[n]=s.type.copy(e[n],this[n]))}return this}clone(){return(new this.constructor).copy(this)}reset(){const e=this.constructor.schema;for(const t in e){const n=e[t];if(n.hasOwnProperty("default"))this[t]=n.type.copy(n.default,this[t]);else{const e=n.type;this[t]=e.copy(e.default,this[t])}}}dispose(){this._pool&&this._pool.release(this)}getName(){return this.constructor.getName()}checkUndefinedAttributes(e){const t=this.constructor.schema;Object.keys(e).forEach((e=>{t.hasOwnProperty(e)||console.warn(`Trying to set attribute '${e}' not defined in the '${this.constructor.name}' schema. Please fix the schema, the attribute value won't be set`)}))}}m.schema={},m.isComponent=!0,m.getName=function(){return this.displayName||this.name};class c extends m{}c.isSystemStateComponent=!0;class p extends i{constructor(e,t,n){super(t,void 0),this.entityManager=e,void 0!==n&&this.expand(n)}expand(e){for(var t=0;t<e;t++){var n=new this.T(this.entityManager);n._pool=this,this.freeList.push(n)}this.count+=e}}class d{constructor(e){this.world=e,this.componentsManager=e.componentsManager,this._entities=[],this._nextEntityId=0,this._entitiesByNames={},this._queryManager=new h(this),this.eventDispatcher=new r,this._entityPool=new p(this,this.world.options.entityClass,this.world.options.entityPoolSize),this.entitiesWithComponentsToRemove=[],this.entitiesToRemove=[],this.deferredRemovalEnabled=!0}getEntityByName(e){return this._entitiesByNames[e]}createEntity(e){var t=this._entityPool.acquire();return t.alive=!0,t.name=e||"",e&&(this._entitiesByNames[e]?console.warn(`Entity name '${e}' already exist`):this._entitiesByNames[e]=t),this._entities.push(t),this.eventDispatcher.dispatchEvent(l,t),t}entityAddComponent(e,t,n){if(void 0===t._typeId&&!this.world.componentsManager._ComponentsMap[t._typeId])throw new Error(`Attempted to add unregistered component "${t.getName()}"`);if(!~e._ComponentTypes.indexOf(t)){e._ComponentTypes.push(t),t.__proto__===c&&e.numStateComponents++;var s=this.world.componentsManager.getComponentsPool(t),o=s?s.acquire():new t(n);s&&n&&o.copy(n),e._components[t._typeId]=o,this._queryManager.onEntityComponentAdded(e,t),this.world.componentsManager.componentAddedToEntity(t),this.eventDispatcher.dispatchEvent(y,e,t)}}entityRemoveComponent(e,t,n){var s=e._ComponentTypes.indexOf(t);~s&&(this.eventDispatcher.dispatchEvent(_,e,t),n?this._entityRemoveComponentSync(e,t,s):(0===e._ComponentTypesToRemove.length&&this.entitiesWithComponentsToRemove.push(e),e._ComponentTypes.splice(s,1),e._ComponentTypesToRemove.push(t),e._componentsToRemove[t._typeId]=e._components[t._typeId],delete e._components[t._typeId]),this._queryManager.onEntityComponentRemoved(e,t),t.__proto__===c&&(e.numStateComponents--,0!==e.numStateComponents||e.alive||e.remove()))}_entityRemoveComponentSync(e,t,n){e._ComponentTypes.splice(n,1);var s=e._components[t._typeId];delete e._components[t._typeId],s.dispose(),this.world.componentsManager.componentRemovedFromEntity(t)}entityRemoveAllComponents(e,t){let n=e._ComponentTypes;for(let s=n.length-1;s>=0;s--)n[s].__proto__!==c&&this.entityRemoveComponent(e,n[s],t)}removeEntity(e,t){var n=this._entities.indexOf(e);if(!~n)throw new Error("Tried to remove entity not in list");e.alive=!1,this.entityRemoveAllComponents(e,t),0===e.numStateComponents&&(this.eventDispatcher.dispatchEvent(u,e),this._queryManager.onEntityRemoved(e),!0===t?this._releaseEntity(e,n):this.entitiesToRemove.push(e))}_releaseEntity(e,t){this._entities.splice(t,1),this._entitiesByNames[e.name]&&delete this._entitiesByNames[e.name],e._pool.release(e)}removeAllEntities(){for(var e=this._entities.length-1;e>=0;e--)this.removeEntity(this._entities[e])}processDeferredRemoval(){if(this.deferredRemovalEnabled){for(let e=0;e<this.entitiesToRemove.length;e++){let t=this.entitiesToRemove[e],n=this._entities.indexOf(t);this._releaseEntity(t,n)}this.entitiesToRemove.length=0;for(let t=0;t<this.entitiesWithComponentsToRemove.length;t++){let n=this.entitiesWithComponentsToRemove[t];for(;n._ComponentTypesToRemove.length>0;){let t=n._ComponentTypesToRemove.pop();var e=n._componentsToRemove[t._typeId];delete n._componentsToRemove[t._typeId],e.dispose(),this.world.componentsManager.componentRemovedFromEntity(t)}}this.entitiesWithComponentsToRemove.length=0}}queryComponents(e){return this._queryManager.getQuery(e)}count(){return this._entities.length}stats(){var e={numEntities:this._entities.length,numQueries:Object.keys(this._queryManager._queries).length,queries:this._queryManager.stats(),numComponentPool:Object.keys(this.componentsManager._componentPool).length,componentPool:{},eventDispatcher:this.eventDispatcher.stats};for(var t in this.componentsManager._componentPool){var n=this.componentsManager._componentPool[t];e.componentPool[n.T.getName()]={used:n.totalUsed(),size:n.count}}return e}}const l="EntityManager#ENTITY_CREATE",u="EntityManager#ENTITY_REMOVED",y="EntityManager#COMPONENT_ADDED",_="EntityManager#COMPONENT_REMOVE";class g{constructor(){this.Components=[],this._ComponentsMap={},this._componentPool={},this.numComponents={},this.nextComponentId=0}hasComponent(e){return-1!==this.Components.indexOf(e)}registerComponent(e,t){if(-1!==this.Components.indexOf(e))return void console.warn(`Component type: '${e.getName()}' already registered.`);const n=e.schema;if(!n)throw new Error(`Component "${e.getName()}" has no schema property.`);for(const t in n)if(!n[t].type)throw new Error(`Invalid schema for component "${e.getName()}". Missing type for "${t}" property.`);e._typeId=this.nextComponentId++,this.Components.push(e),this._ComponentsMap[e._typeId]=e,this.numComponents[e._typeId]=0,void 0===t?t=new i(e):!1===t&&(t=void 0),this._componentPool[e._typeId]=t}componentAddedToEntity(e){this.numComponents[e._typeId]++}componentRemovedFromEntity(e){this.numComponents[e._typeId]--}getComponentsPool(e){return this._componentPool[e._typeId]}}new WeakMap;class v{constructor(e){this._entityManager=e||null,this.id=e._nextEntityId++,this._ComponentTypes=[],this._components={},this._componentsToRemove={},this.queries=[],this._ComponentTypesToRemove=[],this.alive=!1,this.numStateComponents=0}getComponent(e,t){var n=this._components[e._typeId];return n||!0!==t||(n=this._componentsToRemove[e._typeId]),n}getRemovedComponent(e){return this._componentsToRemove[e._typeId]}getComponents(){return this._components}getComponentsToRemove(){return this._componentsToRemove}getComponentTypes(){return this._ComponentTypes}getMutableComponent(e){var t=this._components[e._typeId];if(t){for(var n=0;n<this.queries.length;n++){var s=this.queries[n];s.reactive&&-1!==s.Components.indexOf(e)&&s.eventDispatcher.dispatchEvent(a.prototype.COMPONENT_CHANGED,this,t)}return t}}addComponent(e,t){return this._entityManager.entityAddComponent(this,e,t),this}removeComponent(e,t){return this._entityManager.entityRemoveComponent(this,e,t),this}hasComponent(e,t){return!!~this._ComponentTypes.indexOf(e)||!0===t&&this.hasRemovedComponent(e)}hasRemovedComponent(e){return!!~this._ComponentTypesToRemove.indexOf(e)}hasAllComponents(e){for(var t=0;t<e.length;t++)if(!this.hasComponent(e[t]))return!1;return!0}hasAnyComponents(e){for(var t=0;t<e.length;t++)if(this.hasComponent(e[t]))return!0;return!1}removeAllComponents(e){return this._entityManager.entityRemoveAllComponents(this,e)}copy(e){for(var t in e._components){var n=e._components[t];this.addComponent(n.constructor),this.getComponent(n.constructor).copy(n)}return this}clone(){return new v(this._entityManager).copy(this)}reset(){for(var e in this.id=this._entityManager._nextEntityId++,this._ComponentTypes.length=0,this.queries.length=0,this._components)delete this._components[e]}remove(e){return this._entityManager.removeEntity(this,e)}}const f={entityPoolSize:0,entityClass:v};class C{canExecute(){if(0===this._mandatoryQueries.length)return!0;for(let e=0;e<this._mandatoryQueries.length;e++)if(0===this._mandatoryQueries[e].entities.length)return!1;return!0}getName(){return this.constructor.getName()}constructor(e,t){if(this.world=e,this.enabled=!0,this._queries={},this.queries={},this.priority=0,this.executeTime=0,t&&t.priority&&(this.priority=t.priority),this._mandatoryQueries=[],this.initialized=!0,this.constructor.queries)for(var n in this.constructor.queries){var o=this.constructor.queries[n],i=o.components;if(!i||0===i.length)throw new Error("'components' attribute can't be empty in a query");let e=i.filter((e=>!(0,s.fh)(e)));if(e.length>0)throw new Error(`Tried to create a query '${this.constructor.name}.${n}' with unregistered components: [${e.map((e=>e.getName())).join(", ")}]`);var r=this.world.entityManager.queryComponents(i);this._queries[n]=r,!0===o.mandatory&&this._mandatoryQueries.push(r),this.queries[n]={results:r.entities};var h=["added","removed","changed"];const t={added:a.prototype.ENTITY_ADDED,removed:a.prototype.ENTITY_REMOVED,changed:a.prototype.COMPONENT_CHANGED};o.listen&&h.forEach((e=>{if(this.execute||console.warn(`System '${this.getName()}' has defined listen events (${h.join(", ")}) for query '${n}' but it does not implement the 'execute' method.`),o.listen[e]){let s=o.listen[e];if("changed"===e){if(r.reactive=!0,!0===s){let t=this.queries[n][e]=[];r.eventDispatcher.addEventListener(a.prototype.COMPONENT_CHANGED,(e=>{-1===t.indexOf(e)&&t.push(e)}))}else if(Array.isArray(s)){let t=this.queries[n][e]=[];r.eventDispatcher.addEventListener(a.prototype.COMPONENT_CHANGED,((e,n)=>{-1!==s.indexOf(n.constructor)&&-1===t.indexOf(e)&&t.push(e)}))}}else{let s=this.queries[n][e]=[];r.eventDispatcher.addEventListener(t[e],(e=>{-1===s.indexOf(e)&&s.push(e)}))}}}))}}stop(){this.executeTime=0,this.enabled=!1}play(){this.enabled=!0}clearEvents(){for(let t in this.queries){var e=this.queries[t];if(e.added&&(e.added.length=0),e.removed&&(e.removed.length=0),e.changed)if(Array.isArray(e.changed))e.changed.length=0;else for(let t in e.changed)e.changed[t].length=0}}toJSON(){var e={name:this.getName(),enabled:this.enabled,executeTime:this.executeTime,priority:this.priority,queries:{}};if(this.constructor.queries){var t=this.constructor.queries;for(let n in t){let s=this.queries[n],o=t[n],i=e.queries[n]={key:this._queries[n].key};i.mandatory=!0===o.mandatory,i.reactive=o.listen&&(!0===o.listen.added||!0===o.listen.removed||!0===o.listen.changed||Array.isArray(o.listen.changed)),i.reactive&&(i.listen={},["added","removed","changed"].forEach((e=>{s[e]&&(i.listen[e]={entities:s[e].length})})))}}return e}}function E(e){return{operator:"not",Component:e}}C.isSystem=!0,C.getName=function(){return this.displayName||this.name};class w extends m{constructor(){super(!1)}}w.isTagComponent=!0;const x=e=>e,T=e=>e;function O(e){var t=["name","default","copy","clone"].filter((t=>!e.hasOwnProperty(t)));if(t.length>0)throw new Error(`createType expects a type definition with the following properties: ${t.join(", ")}`);return e.isType=!0,e}const M={Number:O({name:"Number",default:0,copy:x,clone:T}),Boolean:O({name:"Boolean",default:!1,copy:x,clone:T}),String:O({name:"String",default:"",copy:x,clone:T}),Array:O({name:"Array",default:[],copy:(e,t)=>{if(!e)return e;if(!t)return e.slice();t.length=0;for(let n=0;n<e.length;n++)t.push(e[n]);return t},clone:e=>e&&e.slice()}),Ref:O({name:"Ref",default:void 0,copy:x,clone:T}),JSON:O({name:"JSON",default:null,copy:e=>JSON.parse(JSON.stringify(e)),clone:e=>JSON.parse(JSON.stringify(e))})};n(324);class S extends m{}S.schema={x:{type:M.Number},y:{type:M.Number}};class N extends m{}N.schema={x:{type:M.Number},y:{type:M.Number}};class q extends w{}class R extends m{}R.schema={primitive:{type:M.String,default:"box"}};class b extends m{constructor(){super(),this.reset()}reset(){this.config=void 0,this.app=void 0}}b.schema={app:{type:M.Ref},elem:{type:M.Ref},config:{type:M.JSON}};class I extends m{}I.schema={name:{type:M.String},fileName:{type:M.String}};const D=O({name:"PixiRef",default:void 0,copy:x,clone:T});class A extends c{}A.schema={ref:{type:D}};class P extends m{}P.schema={name:{type:M.String},url:{type:M.String}};class L extends c{}L.schema={state:{type:M.String},progress:{type:M.JSON}};class k extends m{}k.schema={time:{type:M.Number}};class j extends C{execute(e,t){this.queries.moving.results.forEach((e=>{let t=e.getComponent(A),n=e.getComponent(k),s=e.getMutableComponent(N),o=e.getMutableComponent(S),i=null==t?void 0:t.ref;o&&s&&i&&n&&(o.x+=s.x*n.time,o.y+=s.y*n.time,o.x>window.innerWidth+i.width&&(o.x=-i.width),o.x<-i.width&&(o.x=window.innerWidth),o.y>window.innerHeight+i.height&&(o.y=-i.height),o.y<-i.height&&(o.y=window.innerHeight))}))}}j.queries={moving:{components:[N,S,k,A]}};class $ extends C{execute(e,t){var n;null===(n=this.queries.engine.results[0].getComponent(b))||void 0===n||n.app,this.queries.renderables.results.forEach((e=>{}))}}$.queries={engine:{components:[b]},renderables:{components:[q,R]}};var W=n(216);class B extends C{constructor(e,t){super(e,t),console.log("Creation of EngineSystem")}execute(e,t){var n;let s=this.queries.engine.results[0].getMutableComponent(b);s&&!s.app&&(s.app=new W.MxU(s.config),s.app.stage.sortableChildren=!0,null===(n=s.elem)||void 0===n||n.appendChild(s.app.view))}}B.queries={engine:{components:[b]}};class Y extends C{execute(e,t){var n;let s=null===(n=this.queries.engine.results[0].getComponent(b))||void 0===n?void 0:n.app;if(0===this.queries.loaderState.results.length)this.stopSystemsAfter(),this.queries.toLoad.results.forEach((e=>{var t,n;let o=null===(t=e.getComponent(P))||void 0===t?void 0:t.url,i=null===(n=e.getComponent(P))||void 0===n?void 0:n.name;i&&o&&(null==s||s.loader.add(i,o,(()=>{})),this.world.createEntity().addComponent(L,{state:"toLoad"}))}));else{let e=this.queries.loaderState.results[0].getMutableComponent(L);"toLoad"===(null==e?void 0:e.state)&&(e.state="loading",null==s||s.loader.load((()=>{e&&(e.state="loaded"),this.startSystemsAfter()})),null==s||s.loader.onProgress.add(((t,n)=>{e&&(e.progress=t.progress),n.error?console.log(`Loading of ${n.name} at ${n.url} failed!`):console.log(`Loading of ${n.name} at ${n.url} succeed!`)})))}}stopSystemsAfter(){let e=this.world.getSystems();for(var t=e.findIndex((e=>e instanceof Y))+1;t<e.length;t++)e[t].stop()}startSystemsAfter(){let e=this.world.getSystems();for(var t=e.findIndex((e=>e instanceof Y))+1;t<e.length;t++)e[t].play()}}Y.queries={loaderState:{components:[L]},toLoad:{components:[P]},engine:{components:[b]}};class U extends C{execute(e,t){var n;let s=null===(n=this.queries.engine.results[0].getComponent(b))||void 0===n?void 0:n.app;this.queries.creates.results.forEach((e=>{let t=e.getComponent(I),n=e.getComponent(S),o=null==s?void 0:s.loader.resources[(null==t?void 0:t.name)||""],i=new W.jyi(null==o?void 0:o.texture);i.scale.x=i.scale.y=.1+.1*Math.random(),i&&n&&(i.x=null==n?void 0:n.x,i.y=null==n?void 0:n.y),null==s||s.stage.addChild(i),e.addComponent(A,{ref:i})})),this.queries.updates.results.forEach((e=>{e.getComponent(I);let t=e.getComponent(S),n=e.getMutableComponent(A),s=null==n?void 0:n.ref;n&&s&&t&&(s.x=null==t?void 0:t.x,s.y=null==t?void 0:t.y,n.ref=s)}))}}U.queries={creates:{components:[I,E(A),S]},deletes:{components:[E(I),A]},updates:{components:[I,A,S]},engine:{components:[b]}};class H extends C{execute(e,t){this.queries.lifetimes.results.forEach((e=>{let t=e.getMutableComponent(k);t&&(t.time+=1)}))}}H.queries={lifetimes:{components:[k]}};var J=n(615),Q=n(787);function V(e,t){let n=new URLSearchParams(location.search);return parseFloat(n.get(e)||"")||t}const z=new class{constructor(e={}){if(this.options=Object.assign({},f,e),this.componentsManager=new g(this),this.entityManager=new d(this),this.systemManager=new o(this),this.enabled=!0,this.eventQueues={},s.Ym&&"undefined"!=typeof CustomEvent){var t=new CustomEvent("ecsy-world-created",{detail:{world:this,version:"0.3.1"}});window.dispatchEvent(t)}this.lastTime=(0,s.zO)()/1e3}registerComponent(e,t){return this.componentsManager.registerComponent(e,t),this}registerSystem(e,t){return this.systemManager.registerSystem(e,t),this}hasRegisteredComponent(e){return this.componentsManager.hasComponent(e)}unregisterSystem(e){return this.systemManager.unregisterSystem(e),this}getSystem(e){return this.systemManager.getSystem(e)}getSystems(){return this.systemManager.getSystems()}execute(e,t){e||(e=(t=(0,s.zO)()/1e3)-this.lastTime,this.lastTime=t),this.enabled&&(this.systemManager.execute(e,t),this.entityManager.processDeferredRemoval())}stop(){this.enabled=!1}play(){this.enabled=!0}createEntity(e){return this.entityManager.createEntity(e)}stats(){return{entities:this.entityManager.stats(),system:this.systemManager.stats()}}};z.registerComponent(S).registerComponent(q).registerComponent(R).registerComponent(N).registerComponent(b).registerComponent(P).registerComponent(L).registerComponent(I).registerComponent(A).registerComponent(k).registerSystem(j).registerSystem($).registerSystem(B).registerSystem(Y).registerSystem(U).registerSystem(H);const G={width:window.innerWidth,height:window.innerHeight,resolution:window.devicePixelRatio,backgroundColor:16777215};let F=document.body;z.createEntity().addComponent(b,{elem:F,config:G}),console.log("world created"),[{name:"afro",url:Q},{name:"itakura",url:J}].forEach((e=>{z.createEntity().addComponent(P,e)}));const K=V("s",.03);function X(){return{primitive:Math.random()>=.5?"afro":"itakura"}}for(let e=0;e<V("c",100);e++){let e=X();z.createEntity().addComponent(N,{x:K*(2*Math.random()-1)+1e-6,y:K*(2*Math.random()-1)+1e-6}).addComponent(R,X()).addComponent(S,{x:Math.random()*window.innerWidth,y:Math.random()*window.innerHeight}).addComponent(I,{name:e.primitive}).addComponent(k,{time:0})}let Z=performance.now();requestAnimationFrame((function e(t){const n=t-Z;Z=t,z.execute(n,t),requestAnimationFrame(e)}))},787:(e,t,n)=>{"use strict";e.exports=n.p+"79ef3d3716e181ecee64.png"},615:(e,t,n)=>{"use strict";e.exports=n.p+"bfd7eb9765085aebc38d.png"}},e=>{"use strict";e(e.s=869)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,